module Lib
    ( someFunc
    ) where

import Control.Applicative
import Data.Char (isDigit, isSpace)
import Data.List (foldl')

newtype Parser t = Parser { doParse :: String -> Maybe (t, String) }

instance Functor Parser where
  fmap f parser = Parser { doParse = \p -> do
                             (res, restOfString) <- doParse parser p
                             return (f res, restOfString) }

instance Applicative Parser where
  pure x = Parser { doParse = \p -> Just (x, p) }
  pf <*> p = Parser { doParse = \input -> do
                        (f, rs) <- doParse pf input
                        (v, rss) <- doParse p rs
                        return (f v, rss) }

instance Monad Parser where
  p >>= f = Parser { doParse = \input -> do
                       (v, rs) <- doParse p input
                       doParse (f v) rs }

instance Alternative Parser where
  empty = Parser (const Nothing)
  Parser p1 <|> Parser p2 = Parser $ liftA2 (<|>) p1 p2

zeroOrMore :: Parser a -> Parser [a]
zeroOrMore p = ((:) <$> p <*> zeroOrMore p) <|> pure []

oneOrMore :: Parser a -> Parser [a]
oneOrMore p = (:) <$> p <*> zeroOrMore p

endOfInput :: Parser ()
endOfInput = Parser p where
  p [] = Just ((), "")
  p _ = Nothing

satisfy :: (Char -> Bool) -> Parser Char
satisfy p = Parser f where
  f [] = Nothing
  f (x:xs)
    | p x = Just (x, xs)
    | otherwise = Nothing

digit :: Parser Char
digit = Parser { doParse = f } where
  f "" = Nothing
  f (x:xs) | isDigit x = Just (x, xs)
  f _ = Nothing

number :: Parser Integer
number = fmap read (oneOrMore (satisfy isDigit))

openBracket :: Parser Char
openBracket = satisfy (== '(')

closeBracket :: Parser Char
closeBracket = satisfy (== ')')

-- Day 18 Part 1

operation :: Parser (Integer -> Integer -> Integer)
operation = plus <|> times where
  plus = satisfy (== '+') >> pure (+)
  times = satisfy (== '*') >> pure (*)

expression :: Parser Integer
expression = do
  firstNum <- expressionWithBrackets <|> number
  let opAndNum :: Parser (Integer -> Integer -> Integer, Integer)
      opAndNum = do
        binaryOp <- operation
        num <- expressionWithBrackets <|> number
        return (binaryOp, num)

      remaining :: Parser [(Integer -> Integer -> Integer, Integer)]
      remaining = zeroOrMore opAndNum
  remainingOpsAndNums <- remaining
  return $ foldl' (\x (op, y) -> op x y) firstNum remainingOpsAndNums

expressionWithBrackets :: Parser Integer
expressionWithBrackets = do
  openBracket
  result <- expression
  closeBracket
  return result

expressionMaybeWithBrackets :: Parser Integer
expressionMaybeWithBrackets = (expressionWithBrackets <* endOfInput) <|> (expression <* endOfInput)

-- Day 18 Part 2

addExpression :: Parser Integer
addExpression = do
  firstNum <- expressionWithBracketsWithPrecedence <|> number
  let opAndNum = satisfy (== '+') >> (expressionWithBracketsWithPrecedence <|> number)
      remaining = zeroOrMore opAndNum
  remainingNums <- remaining
  return $ foldl' (+) firstNum remainingNums

multiplyExpression :: Parser Integer
multiplyExpression = do
  firstNum <- addExpression
  let opAndNum = satisfy (== '*') >> addExpression
      remaining = zeroOrMore opAndNum
  remainingNums <- remaining
  return $ foldl' (*) firstNum remainingNums

expressionWithBracketsWithPrecedence :: Parser Integer
expressionWithBracketsWithPrecedence = do
  openBracket
  result <- multiplyExpression
  closeBracket
  return result

expressionMaybeWithBracketsWithPrecedence :: Parser Integer
expressionMaybeWithBracketsWithPrecedence = (expressionWithBracketsWithPrecedence <* endOfInput) <|> (multiplyExpression <* endOfInput)

-- Inputs

day18inputtest:: String
day18inputtest = "2 * 3 + (4 * 5) \n\
\ ((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 4 + 2 * 2"

day18input :: String
day18input = "8 + (9 + 7 * 4 * 9) + 4 * 8 * (6 * 6 * 9 * 8 * 3 * 7) + 2 \n\
\ 7 * 5 * (8 + (2 * 6 + 5 + 2 * 6) * 3 * 3) + 2 * 8 + (2 + 5 * 8 * 7 + 6 + 8) \n\
\ 4 * (4 * (4 + 8 + 9 * 7) + 5 + 9 * 6 * (4 + 4 + 8 + 7 * 9 + 3)) * 3 + (6 + 5 * 9 * 5 * (4 * 4 + 5 + 3)) + (6 * 9 * 5 * 3 * 7 + 2) * (9 * 4 * (2 * 8)) \n\
\ (3 * 2 + 7) + 3 + 6 + 5 * 2 + 2 \n\
\ 9 + (3 * 5 * 2 * 3) + 5 + ((7 + 6) + 4 * (5 * 8 + 9 + 9 * 4 + 5) + 8) + 9 \n\
\ 5 + 5 * 9 * 4 + ((5 * 8 + 7) * 2) \n\
\ 9 + 5 + 7 * ((6 + 3 * 8 * 3 + 3) * 2 + 5 + 8 * (3 * 2 * 9 * 3)) * 4 + 8 \n\
\ 8 * (5 * (7 * 7) + 2 * 6 * 9) \n\
\ (3 + 8 + 9 * 5 * 8) * (8 * (7 * 4 * 7 + 2 + 3 * 6) + 2) + 8 * (8 + 9 + 5 * 4 + (2 + 7 * 3)) \n\
\ ((7 + 9) * 4 * 4 + (2 * 5 + 8 * 8) * 7 * 5) * 2 * 9 * 4 * (3 * 5 * 7 * 7 + 2 + 6) + 2 \n\
\ ((9 * 9 * 4 + 8 + 7 + 9) + 8) + 2 * 3 + 7 + 2 \n\
\ (2 * 6 * 2) * 5 + (2 * 7 * 6) * (4 * 8 * 7 + 9 + 6) * 4 * 7 \n\
\ (4 * (5 + 9 + 8) + 7) * 6 \n\
\ 2 * 3 + (4 + 3 + 3 * 7 * 2 + (3 * 2)) \n\
\ (9 * 4) + 3 * 8 * 4 + 2 \n\
\ 9 * 7 + 2 \n\
\ ((6 * 4 + 7 * 8) * 6 * (2 * 9 + 5) + 3 + (5 * 6 + 5 + 9)) + 7 \n\
\ 3 * 5 + 3 + (3 * 9 + 5) + 7 + 7 \n\
\ 2 * (4 + 2 * 2 + (9 + 3) * (6 * 7) + 3) * 8 * (3 * 2 + 2 * (5 + 3 * 3) * 3) + 4 \n\
\ ((6 * 2 * 4 + 3 + 6 + 7) * 9 * (8 + 8 * 8) * (3 * 2) + (7 * 3)) * (8 * 2 * 7 + (8 + 2 + 6 + 3 + 9 + 8)) + 9 * 6 \n\
\ 5 + (5 + 6 + 7 * 6 + 6 * 9) \n\
\ 9 + ((5 * 3 + 9 * 9) + 4 + 7) * (5 * 4 + 5) * 6 * (7 * (7 * 3) * 2) + 5 \n\
\ 8 + 6 * 6 + 8 + 5 + 2 \n\
\ (5 * 4 + 6) * (7 + 7 * 5 * 5 + 8 * 2) \n\
\ (6 * 3 + 4 * 6 * 2 * 6) + 3 * 5 + 2 * ((3 * 2 + 6) + (4 + 9 + 7) + (9 + 6 * 6 + 7) * (4 * 3 + 7 + 2 + 8 + 8) * 7) * 7 \n\
\ (9 * 8 + 9 + (6 * 4 * 8) * 7 + 6) * 6 + 6 * 7 \n\
\ (5 + 7 * 5 + 3) * ((7 * 4 * 7 + 8 * 2 + 7) * (6 * 8 + 7 * 8) + 9 * 2) + 8 \n\
\ (2 + 8 + 3 + 2) * (9 + (3 * 9) + (4 * 9 + 3 * 8 * 8 + 8) + 7) + 8 * 2 \n\
\ 8 + (9 * 3 + 8 * 3 * 3) * (7 + 4 + 5 * 6 + 2 + 9) + 7 + (9 + 8 + 4 + 8 + 7) + 4 \n\
\ (3 * (2 * 4 * 7 * 4) * 7 * 2 * (4 + 8 * 2 + 7 + 5 * 4) * 4) * 2 \n\
\ 2 + (6 + 8 * 7) + (3 + 6 + 3 * 3 + 8 + 4) + 9 \n\
\ (4 * (8 * 3 + 3 + 7 + 9) * (8 + 5 * 2 + 6 + 2) * 8) + 8 * 6 * 4 + ((3 * 5 * 7 * 3 + 2 * 2) + (6 * 8 + 5 * 9 + 7) * 8) \n\
\ (3 * 8 * 3 + 4) + (9 + 2 + 7 * 2 * 2) * 8 \n\
\ (9 + 3 + (3 + 7 + 3 + 8 + 3 + 6) + (7 + 2 + 4 + 4 * 5 * 2) + 6 + 6) * 2 \n\
\ (5 * 7) + ((3 + 5) * 4 * (3 + 8 * 9)) * ((6 * 5 * 9 * 3 * 4 * 6) * 4 * 7 * (5 * 3 + 8) + 7) + 7 \n\
\ (3 + 5 * (6 * 7 + 8)) * (9 + 6) + 5 * ((7 + 4 + 7) + 4 * 3) \n\
\ 9 + 4 + (5 * 4 + 3 * 8 * 8) * 9 \n\
\ 2 + 3 * (8 + 7 * 3 + (4 + 6 * 4 * 2) + 5 + 4) + (3 + 2) \n\
\ 7 * 7 * 5 * (7 + 3 * 3 * 4 * 4 + 2) * 8 \n\
\ 6 * 6 + ((8 * 6 * 2 * 9 + 7 + 8) + 8 * 8 * 3 + 6) * (2 + 8 + 8 + 8 * 2) \n\
\ 8 * 9 + (7 * 7 + 8 + 3 * 8) * 7 * 5 * 4 \n\
\ 3 + 6 + 6 + 7 + 9 * 9 \n\
\ (6 * (6 * 6) + 2 + 7 * 7) + 6 * 7 * 4 * 3 * (8 + (6 * 6 + 4)) \n\
\ ((6 * 6) + 6 + 8 * 8 * 2) + (9 + 3 + (2 * 5 * 4 * 8 * 8 * 8) + (6 * 8) * 7 * 7) \n\
\ (8 + (7 * 8 + 4 * 3 + 4 + 3) * 5 + (5 * 5 * 5 + 7 * 6 + 7) * (8 + 6 * 9 + 7 + 9)) * ((7 + 7 + 8 + 3) + 7 * 2 * 5) * 9 + 7 \n\
\ 5 + ((4 * 4 + 9 * 4 + 3) + (7 * 7) * 8 * 7) * 2 * 6 + (7 * 5 + 6 * 9 + (3 * 5 + 9)) \n\
\ 6 * 5 \n\
\ 8 + (9 + 6 * 4 * 4 * (2 * 2 * 8 * 7) + 3) * 2 + 9 * 9 \n\
\ (9 + 5 * 5 * 7) * 9 * 2 + ((8 * 2 * 4) * 8) \n\
\ 2 + (9 + 8 * 4 * (5 + 5 + 4) + 9 + 5) * 3 \n\
\ 8 * 9 * 6 + (2 + 3 + 7 + 4 + 8) + 9 \n\
\ 6 * 8 + 5 + (3 * 8 * 4 + 5 + 5) + 4 + 7 \n\
\ 7 + 8 * 3 + 4 * 3 + (5 * (2 * 2 * 3 * 5 * 7 + 5)) \n\
\ 6 + 9 + 7 * 2 + 6 * 4 \n\
\ 7 + (9 * (2 + 5 * 6) + 3 + 3 * 9 * 9) + 6 + (4 * 7 * 2 + 9 + (4 + 4)) \n\
\ (4 + (3 * 9 * 3 * 2 + 3)) * 2 * 8 \n\
\ 3 + (8 + 8) \n\
\ 3 * 6 * 8 * 9 + (7 + 2 * 4 * 6 + 3) * (7 * 2) \n\
\ (7 + 5 + 6 * 9) * 4 * 8 \n\
\ 2 + 4 * 2 + 7 * 4 * (9 + 9 * 7 * 4 + (9 + 9) * 4) \n\
\ 5 + 5 + (5 * 4 * 7 * 8) \n\
\ 6 * 7 * (8 * 4) + 9 + 3 + 6 \n\
\ (7 * 6 + 8 * (7 * 5 * 6 + 2 * 2) + 2) * (9 * 2 * 6 * 9 + 9 * 9) * 3 \n\
\ ((2 + 9 + 5 + 4 * 5 + 4) * 8 + 2 * 3 * (6 * 8 + 3 * 8 + 5 * 9) + (2 + 8)) + 3 \n\
\ (4 * 4 * 9) * 5 + (5 * (5 * 8 * 2 * 5) * 8) * 8 \n\
\ (4 + 9 * 3 + 4) + 8 + 6 + 5 \n\
\ 3 * 3 + (7 * 5 + 8 + 9 * 7) \n\
\ 9 + 9 * (8 + 7 + 8 * 7 * 2 + 7) + 4 + 6 \n\
\ 4 + 4 + ((2 + 2 + 9 + 6 * 7) + 6 + 9) + 8 * 2 \n\
\ (4 * 3) + 7 + (3 + 8) * 3 \n\
\ 9 * (4 * (4 * 7)) + 6 \n\
\ 3 + 4 * 2 * (2 + (4 + 8) * 5 * 2) * 9 \n\
\ 6 + 9 * ((4 * 4 * 5 * 6 * 2 + 6) * 5 * 7 * (9 + 3 + 9 * 4) + 5 * 2) * (3 + 3 * 4 * (5 + 5) + (7 + 2 * 5 * 9) + 6) + 9 \n\
\ (9 + 7 * 8 + 3 * (3 * 3 * 2 + 4)) * 2 \n\
\ 7 + 4 * (8 * 5) + 3 + 9 \n\
\ 6 * (3 * 6 + 2) * 8 \n\
\ 2 * 8 + 9 + (5 + 4 * 2) * 7 \n\
\ 8 + 9 * 3 + (4 * 7 * 8 * (6 + 4 * 5 * 7 + 5) * (4 + 4)) + 6 * (7 * 5 + 4) \n\
\ 4 + 3 + (9 * (6 * 7 + 8 + 4) + (6 + 9) + 3 + (3 * 7 + 9)) * 3 + 7 \n\
\ 2 * (5 + 3 * 4 * 4) * 6 + 2 * 5 \n\
\ 6 * 4 * (5 + (5 * 3 * 9 * 9 + 3) * 9 * 6 + (3 + 8 + 9)) + 6 + 6 * 7 \n\
\ (6 + 3 * 3 * (4 * 4 * 5 * 7 + 9 + 6) + 2) * (3 + (8 + 2 * 7 + 5)) + 4 \n\
\ (9 + 5 + 5 * 3 + 7) + 4 * 9 + 8 + 2 \n\
\ 6 + 5 * (6 * 6 * 8) \n\
\ 3 + 2 * 9 \n\
\ 8 * 6 * (5 + 8 * (7 + 3 + 3 * 3 * 8) * 8) \n\
\ (3 + (3 + 2 * 6 + 6 + 3 + 9) + 6 * 5) * 4 * ((2 * 5 + 9) * 5 * 9) + 9 * 3 \n\
\ 9 + 3 * (8 + 9 * 2 * (3 + 7) + 5 * 9) * 3 \n\
\ 6 * 2 * 3 * (2 + 8 * (4 + 6) + 9 * (9 * 8 * 9 * 6 + 9) * (9 * 8 * 2 * 7 * 5 + 8)) + 4 \n\
\ 7 * 7 + (5 + 3 + 7 * (2 + 4) * 7 + (8 * 7)) \n\
\ (3 + 8) + (2 + 5 * 2 + 7) * 7 \n\
\ (2 + 3 * 5 + 5 * 2) * ((4 * 2 * 4 + 2) + (4 * 7 + 8) * 9) + 3 \n\
\ (3 * 2 * 5 * 5) * (7 + 2 * (7 + 5 * 2 * 3 * 4)) + (8 + 7 + 8 * (4 + 7 * 8 * 5)) * 6 + 5 * 8 \n\
\ 4 + 8 + 5 * ((9 * 5 * 7 + 4) * (5 * 3 + 9 * 2 * 6 + 7) + 7 * (4 + 8 * 2 * 5 + 6) + (4 + 9 + 2 * 8)) + 6 \n\
\ 2 * 5 * 5 * 9 * 2 \n\
\ 3 * (2 * 8 * 4 + 9) + (6 + 2 * 9) * 2 \n\
\ 7 + 7 + 8 * (2 + 9 * (5 + 2)) + 7 \n\
\ (7 + (7 + 3 * 9 + 5 + 8) * 5) + ((4 * 5 + 2) * 9 + (9 + 2 + 8 * 2) * 8 * 9 * 7) * (8 + 9 + 5 + (5 * 9 * 7 + 9)) + (4 + (8 + 4) * (7 * 8 + 6 + 6) + (8 + 9 + 4 + 3 + 4 + 6) + (7 + 9 + 6 * 8 + 2) * 9) \n\
\ (6 + 7 + 8 * 9 * 3) + 2 + 2 * 5 \n\
\ ((9 * 5 * 9 + 9) + (9 + 9 * 9 * 9 * 7 * 9)) * 3 \n\
\ 6 + ((4 * 3 * 3 * 5) * 3) * 5 + 8 \n\
\ 9 + 2 * 4 * (4 + 3 + 7 + (4 * 3 + 5 + 6) * (7 * 9 * 8 * 4 + 5 * 2) + 4) * 5 \n\
\ 5 * ((4 + 7 + 3 + 3 * 5) * 8 + 2 + 7 * 4 + 6) + 9 * 6 \n\
\ 4 + 6 + 3 * 6 * (4 + 9 + 3 + 4 * 7) \n\
\ 6 * (2 * 3 * 4 + (2 * 9) + 6 * (8 * 4 + 3)) * 7 * 3 + 7 + (6 + 9 * 3 * 7 * 9 * 9) \n\
\ 3 + 5 * 7 + 4 + 6 + (3 * 4 + (2 * 2 * 5 + 6 + 2 * 2)) \n\
\ 4 + (2 * 5) * 2 + 5 * (6 * 8 + 7 + 5 + 9 * 9) \n\
\ 6 + 2 * (4 * (4 * 8 * 9 * 6 * 3) * 9 + 4 + 2) * 4 \n\
\ 5 * 6 + ((4 * 8) * 9 + 4 * (4 * 2 + 3 * 8 * 9 + 7) * 4 + (5 * 2)) * 4 + 5 \n\
\ 4 * ((4 * 3) + 4 + 4 * 7) \n\
\ ((9 * 7) * (7 + 4 + 6) + 9 * 3 + 9) + 9 * 6 \n\
\ 8 * 2 + 9 + 5 * (7 * 5 + 3 * 3) \n\
\ 2 + 8 * 7 + ((3 * 6) + 3 * 5 + 7 * 7) * (7 + 8 + (7 + 2) + 4 * 6) + 3 \n\
\ 8 + (8 + 7 * 5 * 4) \n\
\ 4 + (8 + 2 + 4) + 4 + ((4 + 3 + 7 * 5 + 3) * 2 + 5 * 8 + 5) + 6 * 8 \n\
\ (5 + 6) + 2 + 2 * 8 * 2 + 6 \n\
\ (8 * 8 * 2 + 7 + 6) + (4 + 2 * 7 + 9 + 2 * (3 + 4 * 9 * 7 * 5)) + 2 * 6 * 4 \n\
\ 7 * 3 * 9 + (5 + 6 * 7 * (7 + 9 * 7 + 6 * 2 * 9) + 3) * 4 \n\
\ (6 + (8 * 7 * 9) * 8 + (3 * 2) * 3) * 7 * 4 + 3 + 5 * (7 + 9 * 8 + (3 + 7 + 2 + 3) + 7) \n\
\ 5 * (9 + 9) + (3 * 7 + 6 + 7 * 6 + 9) + 4 + 8 + 6 \n\
\ (5 * 5 * 8 * 8 * 9 * (8 + 4 * 8 + 8)) + 6 \n\
\ 6 * 3 + 9 + (3 * 3 + (9 + 2 + 6) * 7 * 3) + 2 \n\
\ (5 + (6 * 7 + 5)) + (3 * 3 + 4 * (3 * 9 * 6 + 4 + 5 + 9) + 4 * 8) \n\
\ 5 + 2 + 4 * (8 + 8 * 9 + 5 + 8 + 4) \n\
\ 2 * 7 + (7 + 3 + 9 * 9 * (8 + 9 + 4 + 8) + 9) * 8 * 9 * 8 \n\
\ 8 + (5 + 3 + (6 * 4 * 2 + 7 * 3 * 2)) \n\
\ 5 * 2 + 7 + 5 \n\
\ 3 + (3 * 6 + 5 * 9 * 3 + 8) * 7 + 9 * 3 * (4 * 7 + 3) \n\
\ ((9 * 5 + 3 * 5) + 8 * 7 * 8) * (8 + 5 + 7 + 7) * 9 + 9 + 8 * 6 \n\
\ 3 * (9 + 5 * 4 * 6 + 3 + (6 + 7)) \n\
\ (6 + 7 + (2 + 2 * 5 * 9 * 7) + (8 + 9)) * 3 * 5 \n\
\ (2 * 4) * 8 + 2 * (6 + 8 + 5 + 2 * 8) + 4 \n\
\ 5 * (9 * (8 * 6 * 7) + 8 + 6 + 7 * 9) + 7 + 4 * 6 * (5 + 4 + 4) \n\
\ (2 * 7 * 6 * 9 + 2 + 2) * (4 + 6 + 4 + 7 + 3 + 4) + 7 * 7 + (2 + 8) * 9 \n\
\ 3 * ((8 * 5) * (2 * 5 + 6) * (4 + 9 * 9) + 3) * (3 * 6 + 4 + 6 * 2) + 7 * (6 * 7 + 9 * 6) \n\
\ 5 + 5 + (6 * 8 + 3 + 5) * 8 + 8 \n\
\ 4 * 6 \n\
\ 2 + 5 + (9 * 2 + 9 + 7 * 5 + 2) * 5 * 7 + 3 \n\
\ 4 * ((9 + 7 + 9 * 2) * 6 + 6 + 2 * 3 * 4) * 7 * 2 \n\
\ 9 + ((6 + 6) + 6 + 6 * 7 + 3) \n\
\ 7 * 5 * 5 * 4 + (9 * 8 * (2 + 2) * 4 + 2) \n\
\ 6 + 7 \n\
\ 4 * 7 + 7 * 2 + (2 + 6 * 7) \n\
\ 8 * 7 * (5 * 2 * 5 * 2 + (4 + 7)) + (5 * (2 + 6) * 7 * 2 + 3) \n\
\ 9 + 2 * (3 * 7 + 8) * 2 \n\
\ (3 + (2 * 4)) * (6 * 9 + 2 * 6 + 4 + (5 + 9 + 8)) + 7 \n\
\ 4 + 8 * 2 + 6 * 7 \n\
\ 7 + 7 * 8 * 5 * ((2 + 6 + 3 + 9 + 8 * 5) * 2 + 5) \n\
\ 4 * 9 + (4 + (8 * 4 * 2 + 6 + 4 * 9) * 6 * 8 + 9 * 2) * (6 * 3 + 7) + (6 + 3 * 4 + 3 + 5 + (3 + 7 * 3 + 2)) + 3 \n\
\ (6 + 5) + 4 + (9 + 4 + 4 + (7 * 9 + 8 * 6 + 9 + 2)) \n\
\ (8 + 6) + (4 * 6 * 4 + 8) * 6 + (8 + 4 * 4) \n\
\ 5 * 6 * 4 * 2 * 9 \n\
\ 6 * 8 + (9 + 5 * 6 * 7 * 7 * 7) * ((4 + 8 + 2) * 8 + 2) \n\
\ 6 * 7 * 9 * (6 * 6 * 5) + ((3 + 7 * 3 + 6 * 7) + 6 + 4 + 3 + 9) + 7 \n\
\ 5 * 9 + 7 * 7 + (4 * 5 * (7 * 9) * 8) + 4 \n\
\ 7 * (8 * 2 + 4 + (4 + 9 * 2 + 3 * 3 * 9)) * (5 * 5 * 6 + (8 * 5 + 8 + 6 + 8 + 6) + 9) \n\
\ 3 + 2 * 8 * ((2 * 6 + 9) + 3 * 6) \n\
\ 3 * (4 * 6) + 4 * 6 * 3 \n\
\ 6 + 5 + 3 + 3 * (6 * 4 + 4 + (5 + 6 * 5 + 6) * 6) + (7 * 9 + (5 * 4 + 5 * 8) * (9 * 2) * 5 + (3 + 7 * 8 + 7)) \n\
\ ((9 + 7 * 6) * 4 + 6 + 3 * 6 + 5) + (6 + 6 + (6 + 8) + (8 * 3 * 8 + 2 + 5 * 6)) * 2 \n\
\ 4 * (9 * 7 + 8) * 8 + 8 \n\
\ (5 + 8 * 3 + (5 * 6 + 4 + 9 * 8)) + 8 + 9 * (5 + 8) \n\
\ 3 * (9 + 3) * 6 * (5 * 4 + 7) * 9 \n\
\ 2 * 2 * 6 * (6 * 9) \n\
\ ((2 * 7 * 3 * 8) * 7 + 8) * 6 + 4 \n\
\ (4 + 3 * (8 * 7 * 3 * 2) * 5) * 3 * 5 * 3 * (6 * 2 + (3 + 8 * 7 * 6)) \n\
\ (2 + 3 + 2) * (4 * 7 * 2 * 9) \n\
\ 2 + 6 * 6 + 4 + 8 + (2 * 3) \n\
\ 9 * 2 + 8 + 7 * ((6 + 7) + 9 + 3) \n\
\ (6 + 7 + 8 + 9 + 7 + 9) * 2 * (6 * 8) + 3 + 7 * 3 \n\
\ 2 * 8 * (9 * 8 * 8 * 4 * 2) * 7 * (2 + 6 * 3) + 7 \n\
\ (2 + 8 * 7 + 2) + 5 + 9 + (5 + 3 + 2) \n\
\ (9 * (7 + 8 * 7 + 4 * 8 + 3) * 8 * 2 * 8) * 2 * 4 \n\
\ 9 + 7 * 6 * (9 + 6 * 4 * 6 + 7) * (7 + 2 + (3 + 5 + 9 + 6) * 4 + 4 * 5) + 5 \n\
\ (6 + 8 + (6 + 3 + 6 * 4 * 5 + 9) * 3 + 8 + 8) + 6 * 6 * 2 \n\
\ (5 + 5 + 4 * 5) + (3 * (8 + 7 + 6 + 7) + (9 + 5 + 2 * 4 * 9)) * 8 + 8 + 4 * 9 \n\
\ 3 + (8 + 3 + 5 * 5 + 5 + 6) * 2 + 5 \n\
\ (8 * 5 * 3 + 8 * 6 + 8) + 9 + 2 \n\
\ 8 + (8 + 4 + 2 * 2) * 4 + (5 * 8) + (7 + 3 * 2 * 4 + 2 * 2) * 2 \n\
\ (2 + 9 * 3) + 9 + 5 * (6 + 4) \n\
\ 2 * (4 + 7 * 8 + 8 + 6) * 9 + 2 + 3 \n\
\ 8 * (9 + 8) * 8 + ((4 + 2) * (2 + 2 * 3)) * 7 * (4 * (5 + 8 * 2)) \n\
\ 3 * 8 * (8 + 4 * 9 * 7) * (6 + 9 + 5 + (4 * 3 + 3) * 7) \n\
\ (6 + (5 * 3) * 3 + (5 + 8)) + (7 + (3 + 5 + 9 + 6 + 2) * 5 * (8 + 4 * 6) * (9 + 4 + 3) * 7) + 7 * 7 + 8 \n\
\ (5 * 4 + (8 + 2 * 6 * 3) * 8 + 9 + (5 + 3 * 8 + 9 * 6)) * 3 + ((9 * 9 * 5 + 6 * 6 * 2) + 6 * 6 * (3 + 5 + 3)) \n\
\ 6 * 3 * 5 * 6 + 4 * (8 * 7 * 5 + 2 * 2) \n\
\ (6 * 7 + 7 * 4 + 8) + ((3 + 3 + 5 * 9 * 6) * 2 * (2 * 3)) * 7 + 2 * (3 + 9 * 4) \n\
\ 6 * 2 + (5 + 2 * 7 * 6) * 2 + 5 * 6 \n\
\ 5 + 3 * 5 + ((4 * 4 * 2) * (7 * 2 * 8 + 5) + 9 + 7 * 4 + 3) + 5 * (6 * 7 * 7 * (5 * 7)) \n\
\ 7 + (2 * 5 * (7 + 9 + 3 * 6 * 8) + (6 + 6)) * 3 * 8 + (6 * 6 * 5 + 5 + 4) \n\
\ 5 * 3 + 6 + 2 * (7 + 9 + 5 * (4 + 7 + 8 * 2) * 6) \n\
\ 5 + 6 + ((4 + 7 + 3) * 8 * (2 * 4)) \n\
\ 7 * 7 + 5 * 8 * ((5 * 7 * 3 * 6 * 7) * 8) + (6 * 9) \n\
\ 8 + 3 + (4 + 9 + 5 * 9 + 9) + (6 + (2 * 3 * 8)) * 5 + 2 \n\
\ 9 * 3 + ((6 * 4 + 2) + (7 + 8) + 9 * 7 + 3 + 3) * 5 * 2 \n\
\ (9 + 6 + 8 + 3 * 9) * 6 \n\
\ ((6 + 6 * 7 + 2 * 6 + 6) + (7 + 5) + 9) * 7 \n\
\ (9 * 5 * 5 * 8 + 8) * 4 + 3 + (8 * 8) + (7 * 8 * 7 + 8 + (7 + 5 * 4 + 9 + 8)) \n\
\ (6 + 4 * 2 * 7 + 5) + 2 + 3 + 4 * 4 * 5 \n\
\ 9 + ((4 + 3 * 4 + 4) * (8 * 3 * 8 * 3 + 7 * 9) + 9) \n\
\ 8 * (8 * 5 + 9 + 8 * 3) * (4 + 5 * 3 * (9 * 5 + 2 * 4 + 9) + 4) + 2 + 9 * 9 \n\
\ 8 * 8 * ((3 + 3 * 3 + 3 * 9) + 2 + 4 + 2 * 6) * 4 \n\
\ 8 * 7 * 2 * (2 * 9 + 3) * (9 * (8 + 9 + 7 * 2 * 4 + 5) * (3 + 9 * 8)) \n\
\ 8 + 5 * (9 + 7 * (5 * 5 + 9 + 5 + 9 + 3)) * 4 * 6 + (8 * 3 * 4 * 4 * 7 + (7 * 5 * 7 * 7 * 8)) \n\
\ 2 * 3 + 5 + 7 + 8 * 5 \n\
\ 9 * ((9 * 7) + 3 * 9 * 8 * 6) + 5 \n\
\ 2 + 5 + 9 * 3 + ((3 + 3) * 8 + 3 * (3 + 3 + 9 * 6 + 2)) \n\
\ (6 + 5 * 4 * 4 + 5 + 3) * 3 + 8 * 9 + 6 \n\
\ (8 * 3 * 7 + 3) * 9 + 9 * ((6 + 2 + 7) * 6 * 7 + (5 + 6)) * (8 + 6) \n\
\ 3 + (2 + (3 * 8 * 2 * 8 + 6 * 2) + 6 + 3 + 9) + 6 * 3 \n\
\ 5 * (6 + 6) * 3 + 3 + 8 * (6 + 8 + 6) \n\
\ 4 + 8 * (6 * (9 + 4 + 9 + 6) * (9 * 2 + 9) * (9 * 3)) \n\
\ 5 * 5 * 8 * (8 + 3 * (3 * 4) + 6 + 3 * 4) \n\
\ 9 + 8 + 6 * 9 \n\
\ (9 + 6 * 5 + 9 + (4 + 4 + 5 + 3 + 4)) + 6 * 8 * 5 * (7 + 4 * 9 * 6 * 5) \n\
\ (3 * 9 * 2) + 3 * ((9 + 9 * 8) * 9 + (7 + 8 * 8 * 3) + 2 * 4) * 3 + 6 * 5 \n\
\ 6 + 8 + (8 + 3 * 4 * 2 * 8 * 8) + 3 \n\
\ 3 * ((5 + 5 * 8) * 4) + (3 * 3 + 5 * 3 * 6) * 5 \n\
\ 5 * 7 + ((8 + 4 * 9) + 4) + 8 * 7 \n\
\ ((3 + 8 + 6 + 7) + (9 * 9 * 9 + 2) + 8) + 6 \n\
\ ((9 * 4 * 4 + 6) * 2 * 4 + 8) + 8 * ((3 * 3 * 7) * (4 * 5 * 9 + 3) * (6 * 8 * 9 + 8 + 4)) + 8 + 5 \n\
\ (6 + 8 * 7) * 3 + 3 \n\
\ 2 + 7 \n\
\ 7 + 4 + 3 * 9 \n\
\ (9 * (6 * 6 * 2) + 5 + 3) + (7 * 5 * 3 + 9 + 7 + 8) + (8 * 2 + (2 * 4 * 9 + 8 * 8 * 6) + 6 * 8 * 5) \n\
\ (6 * 9 * 7 + 5) + 7 * 3 * 2 * 5 \n\
\ 4 + (7 * 8 + 5 * 6 + 5) \n\
\ ((8 + 9 + 7 + 3) * 9) * 8 + 3 * 4 * 3 + 9 \n\
\ 5 * 2 * (6 * (8 + 3 * 7 * 9 * 6) + (7 + 9 * 9 * 5 * 4) * (7 * 2)) * 6 * 4 * 2 \n\
\ 6 + 8 + 9 + (4 + (8 + 4 * 6 * 9 + 3)) * 8 * 8 \n\
\ (7 + 5 + 6 * 7 * 7) + 4 * (6 * 5 + 2) * 5 + 7 + (7 * (8 + 6) + 3 * 7) \n\
\ 3 * (3 * 9 * 3 * 3 + 8 * 7) * 5 \n\
\ 6 * 5 * (6 * 2 * 2) + 4 + 3 + (3 + 5 + (5 + 8 + 5) + 2 * 4) \n\
\ 2 * (3 + 2 + (5 + 8 + 7 + 2) + 6) + 7 + 3 + 3 + 2 \n\
\ ((2 * 7 + 5 * 2 * 5 * 4) + 4 + 5 * (5 + 8 * 5)) + 3 \n\
\ 8 + (5 * 8 + 7) * 7 * 5 * ((5 + 4 + 9) + 7 * 8 + (6 * 8 + 4 * 2 * 2)) * 4 \n\
\ (3 + 9 + 5 + (6 * 4 * 5 * 2 * 2)) + 5 * (9 * (7 + 7) + 4 * 5) * (2 + 6 + 5 + (2 * 4) * 7) + (4 + 6 + 7 * (3 + 5 + 8)) + (2 * 2) \n\
\ 2 + (3 * 9 * 6 + 2 + 3 + 9) + 3 * (8 + 5) \n\
\ (2 + (8 * 3 + 6) + 8 * 2 * 7 * 2) + 9 * 6 + 5 \n\
\ 3 * 8 + 5 * 2 + 8 + 8 \n\
\ 8 * 6 * 5 * 4 \n\
\ ((3 + 8 + 7) * 8) + 7 * (6 * (5 + 4 * 2 + 2) + (8 * 2 * 2) * 2 + 8) + 2 * 5 \n\
\ (9 * 2) * 2 * (4 * 4) * 6 + (5 * 4 * 6) \n\
\ 7 * (6 + (3 * 9 + 3 + 6 + 6 * 9) * 7 + (7 * 7 * 4) * (3 * 3 + 4 * 8) + 4) \n\
\ (7 + 2 * 3 + 5 * 2 * 6) + 6 * (4 + 8 * 6) \n\
\ (7 + 9 + 3 * 3) * 7 * 3 + (4 * 7 + (5 + 6 + 4 * 9) + 7 + 6) \n\
\ (6 + 5 + (9 + 8 + 7 + 5) + 2 * 9) + 9 * 9 + 8 \n\
\ 9 + 9 + 5 \n\
\ 2 * ((3 * 9 * 2 + 2) + 3 * (2 * 5 * 7 * 4)) + (7 + (8 + 4 + 7) + 7 + 2) \n\
\ 7 + 8 * ((4 * 6) * 7 + 4) \n\
\ (9 * 6 + (4 + 6 * 3) * 4) * 2 * 6 \n\
\ 8 * (8 * 6 * 6 + 4 + 5) * 4 \n\
\ 3 * 9 + (3 + (4 * 6 * 6) * 9 + (2 * 8 + 9) + 3) \n\
\ 8 + 3 + 5 + (2 + 4 + 3 * 5 * 5) \n\
\ ((4 * 4 + 4 * 8 * 7) + 4 + 2 * 7 * 2 * 7) + (3 + 6 * (4 * 9 + 2 * 9) + 9) + 2 * 6 \n\
\ 6 * (4 + 3) * 5 + 6 + (9 * (2 * 2 * 8 * 6 + 2 + 6)) \n\
\ (7 + (8 + 6 * 3) + 3 + 2) + ((4 * 3) + 9 + (4 * 5 + 6 + 4 + 7 * 5) * 2 * 5 + 9) * 5 \n\
\ 8 * 6 + 8 + (2 * (4 + 3) + 8 + 5) \n\
\ 6 + ((4 * 7 * 6) * 6 * 7 * 3 * 9 * 6) + 3 \n\
\ ((8 * 6 + 2 * 9) * (9 * 8 * 4) + 8 + 2 + 8) * 4 \n\
\ 6 * (9 * (4 * 8 + 2 + 2 * 7 * 7) * 6 * 7 + 8 * 4) * 2 \n\
\ ((5 * 8 * 8 + 3 + 5 + 4) + 8) + 3 * ((2 + 9) + 2 * 4 + 7 + 3 + 7) + 7 \n\
\ 8 * ((9 + 5 + 2 * 8 + 7) + (9 * 4 * 6) + (5 * 9 * 6 + 5 * 3) + (2 * 6 * 7) + 9) \n\
\ 7 * ((6 + 9 + 3 * 3 + 4) * 7 * 5) + 4 \n\
\ 3 + (9 + 6 + 4 * 6 + 5 * 7) * (9 + 6 + 7) \n\
\ 6 * ((9 + 6 * 2 * 2 * 3 * 4) + 5 * (4 + 4 + 9 * 9 + 3) + 7) + 7 \n\
\ (3 + 7 * 4) * (9 + 7 * 3 * 5 * 4 * 4) * 6 \n\
\ (7 + 6 * (5 + 6 + 5)) * 9 * 8 \n\
\ ((5 * 8 + 6 * 6 * 2) * 9 * (3 + 2 + 4 + 3 * 6) * 2) * 7 + 8 * 4 * ((3 * 3) + 3) \n\
\ 4 * 5 * 2 + 8 * (6 + 5 + 3 * (7 * 2 * 7) + 2) \n\
\ (4 + 2 * 3 * (5 + 2 * 6)) + 3 \n\
\ 7 + ((9 + 7 * 6 + 5 * 9 * 5) * 2 * 4) * (6 * (2 * 9 * 3) + 7 + 7 * (9 + 8 * 4 * 5 + 6)) + 8 \n\
\ 4 + 7 * (4 * (2 + 9 * 4 + 3 * 7 + 8) + 2 + 6) * 9 * 3 \n\
\ 4 + 3 + ((5 * 3 * 9 + 8 * 5 * 5) + 3 + 7 + 9 + 4) + 5 \n\
\ 2 * 4 + 6 + 5 + (6 + 3 + (8 * 4 * 7) * 4) + 5 \n\
\ 4 + (6 * 4 + 9) + 6 * 3 + 6 \n\
\ 2 + 5 + 4 * 9 * 3 * ((7 + 4) * 7 + 2) \n\
\ 3 + 8 + 5 * ((8 + 4 * 7) + 6 * 8 * 4 * 2 * 7) * 2 + 3 \n\
\ (8 + 4) + 4 + 9 + 8 \n\
\ (7 * 3 * 3 * (9 + 3 * 4 * 5) * 2 * (7 + 4 * 4 * 5 + 8)) * 7 * 4 + 9 + 2 * 9 \n\
\ 3 * 9 * 2 * 9 * (6 + (7 + 2 * 3) * (9 + 7) * 5 + 8) * (6 + 5) \n\
\ 9 * 9 * 7 * 4 \n\
\ (2 + 3 + 2 + 6 + 2) + 8 + 3 \n\
\ 7 * 6 + 6 * (8 + (9 + 3 + 8 * 7 * 2) * (5 + 2 + 6 * 6 * 8) + 2 * 9) \n\
\ (5 * 2 * (9 * 3 * 3 * 4 + 8 * 9) + 5 + 3) + (8 + 6 * 8) * 5 * 5 \n\
\ 4 + (8 + (2 * 2 + 2) * 4) + 9 * 6 + (4 + 5 + (2 + 9)) + 8 \n\
\ 4 + 7 + 7 + (3 + (5 * 8 * 6 * 9) * 4 * 3) + 3 \n\
\ 9 * (7 + 5) + ((9 + 2 + 7 * 8) + 2 + 5) + (4 * 3 * (8 * 5)) + 7 * 3 \n\
\ (2 + 4 * 9 + 4) * 5 \n\
\ (5 + 4 * (8 * 9 + 4 * 2) * 4 + (7 + 3 + 5 * 5)) + 5 + (4 + 4 * 5 * 9) * (6 * 7 * 7 + 2) + 9 \n\
\ 8 + 8 + 4 + 5 + 5 * (6 * 9 * 3 * 2 * 5 + 3) \n\
\ (7 * 2 * 3 * 2 + 3 + (8 * 9 * 7 + 5)) + 6 * 8 \n\
\ (6 + 5 + 7 + 8 + 8 * 2) + 9 * 6 + 9 \n\
\ (6 * 8) + 9 + (7 + 3 + 6 * 6 + 6) + 6 \n\
\ 9 * 7 + 6 * 2 + (7 + 9) \n\
\ (9 + (8 + 9 * 2) + 4 + 3) + 7 + 6 + 3 * (2 + 2 + 5 * (7 + 9 * 9)) + 2 \n\
\ 2 + 7 + 8 + 4 * 3 \n\
\ 8 + ((7 + 3) * (4 + 2 * 9) + (8 * 2 + 7 + 9 * 9 + 9) * 8 + 6) \n\
\ 2 + (7 * 9 + 6) + 8 * 3 * ((2 + 3 + 4) * (5 * 6 * 8)) + 2 \n\
\ 7 + 8 * 2 + (4 * 4 * 2 * 6) + 5 \n\
\ (4 * 7 * 6) + 6 \n\
\ 7 + 4 + 3 * ((2 + 2 * 4 * 4) + 8) + 6 \n\
\ ((4 * 4 + 5 * 7) * 8 + 7 + (9 + 4 + 7 * 9) + 7 * 8) + 6 * 6 + 6 + 5 * 5 \n\
\ 4 * ((2 * 5 + 7 * 8) + 2) + 5 \n\
\ 7 + 3 * (8 + 5 + 9) + 4 + 2 * 3 \n\
\ 3 * (9 + 3 + (8 * 6) * 9 + (3 * 2)) + (9 * 2 + 4) + 2 + ((9 + 3 + 6) + 2) \n\
\ 3 + 3 + 3 + (8 * 3 + (3 * 7 * 7 + 7 * 6) + 2 * 6 * 7) * 9 \n\
\ 2 * 6 * 3 + (4 * 7 + 5 * (7 + 7 * 5 * 2) * 6 + 5) + 9 * 9 \n\
\ 2 * (6 + (9 * 4)) + (2 + (3 + 3)) * 6 * 2 \n\
\ 4 * (4 * (7 + 5 + 9 * 3 + 3 * 9)) \n\
\ (2 + (5 * 7 + 4)) + 9 * 5 + (8 + 9 * 3 * 6 * 5 * 2) * 6 * 6 \n\
\ (6 * 2) + (3 * (6 * 8 * 4 * 6) + 4 * 7 + 4) + 9 + 9 + 5 \n\
\ 2 + ((6 * 6 + 6 * 8) + 2 + 4 + 9 * 6) + 6 \n\
\ 7 + (2 * 6 + 2 * 2) * 6 * 2 + 5 + 2 \n\
\ (6 * 8 + 4 + 9 + (4 * 6)) + 7 * 2 * 4 + 2 \n\
\ 3 + 4 * (8 * 2 + 2 + 2 + 2 * 6) * 8 + 3 + (8 + 6 + 8 * 7 + 9) \n\
\ 8 + (2 * 5 + (6 + 6) + 8 * (3 + 9)) + 7 * (6 * 2 + 9) + 8 \n\
\ 2 + 8 * (2 + 2 + 2 + 7 + (6 + 6 + 5) * 6) * 7 \n\
\ (4 + 4) * 9 \n\
\ (8 * (6 + 8 + 3 + 6 * 4 + 6) * 5 + 2 + 7 * 9) * 4 \n\
\ (9 * 8 * 7) * 5 * (3 * 7 + 3 + 5) \n\
\ (9 * 9 * 9 * 5 * 3 * 7) + (8 * 6) * (9 * (3 * 6) + 3 * 9) + 3 \n\
\ 6 * 4 + 8 * ((3 * 8 + 3 + 9) * 5 + 9 + (4 + 2 * 9 * 7) * 2) \n\
\ 8 + 6 + (3 * 2 + 3 + (6 * 9 * 2) * 6 + 9) + 4 + 8 \n\
\ 3 + 6 + 6 * (9 + (6 * 2 * 8) + 4) * 3 * 4 \n\
\ (9 * 7) + 2 * 3 \n\
\ 3 * 2 + (7 + (7 * 8 * 6 * 5 * 4 + 2) + 9 * 5 * 7) * 6 * 7 \n\
\ 4 * (8 + 9 + 4 * 6 * 4) * 4 + 6 \n\
\ (7 * 2 * 4 * 4 + 8) + (8 * 3 * 9 + 4 * 5) * 2 \n\
\ 6 + ((2 + 5 + 3 * 7 * 2) * 4 + 3) * 8 + 4 * 8 \n\
\ 5 * 3 + 9 \n\
\ 8 + 7 \n\
\ 3 * (8 * 3 * 9) * 9 + 4 * 9 * (3 * 5) \n\
\ 6 + 6 * 9 + 5 + (2 * 7 * 5 * 4) * 3 \n\
\ 2 * 3 * 4 + 7 + (7 + 2 * 3) * 7 \n\
\ 2 + 4 * 7 * (2 * 2 + 6 * 7 * 3 + 7) * (8 + 8) \n\
\ 4 + (6 * 9 * (2 + 2 + 4) * 7 + 7) * 8 \n\
\ 4 * (3 * 2 * 9) \n\
\ 8 + 8 * (2 + (2 + 6 * 5 * 3 + 8 * 2) * 7 * 8 + (8 + 8 * 3 + 9 + 8 + 9)) \n\
\ (9 * 4 * (2 + 4 * 4 + 9 + 4 * 3) + 2) + ((4 * 8) * (5 + 9 * 8 + 2) + (7 * 7 + 2 + 7)) + 4 + 6 \n\
\ 8 + (8 * 8) * 5 \n\
\ 9 * (6 + 4 + 3 * 6) * 3 \n\
\ 4 + (4 * (3 * 9 + 9 + 3 + 7) * 6 * 7 * 7 + 2) * 7 + 8 \n\
\ 8 + 6 + (6 + (2 * 9) * (3 + 9) * 7) \n\
\ 3 * 6 * 2 * 4 * 2 \n\
\ ((6 + 6 + 5 * 7 + 9) * 9 * 2 * (7 * 5 + 8 * 9) + 8 * 4) * 6 * 3 + (2 * 8) \n\
\ (8 + 9 + 7) * (5 * 3 + (9 + 4 + 4 * 7 + 6) * (6 * 7 * 3 * 4 * 5) + (7 * 4 + 4 * 6 + 4)) + 8 \n\
\ (6 * 4) + 2 * 9 + 2 + ((4 + 7 + 3 + 9 + 5 * 8) * (2 + 2) + (4 * 9 * 5 + 3) * 3) + 4 \n\
\ 7 * 4 * ((8 + 8 + 8 * 9) + 8) \n\
\ (2 * 9 * (9 * 3 + 5 * 8 + 4 + 5)) + 3 + 9 * 2 * 8 * ((4 + 6 * 3 + 2 * 2 + 3) * 6 + 8 + 5 + 2 + 9) \n\
\ ((7 + 6 + 4 + 3) + (8 + 9) * (8 * 8 + 8 * 4 + 4 * 5) + 9) * 9 \n\
\ 8 + (9 * 9) * 2 * 8 \n\
\ 2 * 9 + (7 * 7 + 7 + (2 + 4 + 2 * 7) * 6) + 3 * 5 * 7 \n\
\ ((7 * 3 + 2 + 2) + 5 * 9 + 6 + 2) + ((6 * 6 + 7 + 3) + 6 * 5 + 7 * 8) + (7 * 3 + (2 + 4 * 3 * 4 * 2 * 5)) + 7 * 3 + 6 \n\
\ 5 * 7 + (3 * 8 * 5 * 8 * 8 + 8) * 8 + ((8 + 2 * 6 + 6 * 8 + 7) + 9 * 3) \n\
\ 9 + 4 + 3 * (8 + (3 + 4) * 9 + 2 * (2 + 9 + 6)) \n\
\ (7 * 2 * 8 + 4 * 8) + 6 + 9 + (4 + 4 + 8 * (7 + 6 * 5 + 4 + 5 * 5) + 6 * (4 * 9 * 9)) * 4 \n\
\ 3 * 6 + 7 * 7 + 3 + (8 * (9 + 6 + 3 + 2 * 9 * 9) * 3 + 4) \n\
\ 9 * (4 + (6 * 9 + 6 * 8) + 9) * 6 * 3 + 6 \n\
\ 7 + 9 * (7 * 7 + 9 * 9) * 3 \n\
\ (3 * 4) + (2 + 3 + 5 + 7) * 6 + 3 * 6 \n\
\ 8 + (8 * (9 + 9 + 8 * 4 + 4 + 2) * 4 * 9) \n\
\ (7 + 9 * 3 + 6 * 6) * 2 + 9 + 5 + (6 + 3 * 2) + 8 \n\
\ 2 + ((6 + 4 + 2 + 2 + 2) + 2 + 3 + 7 * 3) + ((7 + 7 * 8 * 8) * (9 + 2 * 8) * 5 * 6) * (7 * 7 * 5 + 9) \n\
\ (5 * 9 + (9 + 5)) * ((2 * 7 * 2 + 4 * 5 * 5) * 6 + 8) + 8 * 9 \n\
\ 4 * ((5 + 6 + 7 * 9 * 4 + 2) * 6 + 5 * (5 * 2 * 7 * 6 * 9) + 5) \n\
\ 6 * 6 + ((5 * 4 + 8 * 7 * 6 * 6) * 9 + 4) + 3 + 2 * 7 \n\
\ ((4 * 6 + 5) * 9 * 7 + 5) * 9 \n\
\ ((8 * 8 * 6 + 4 + 4 * 7) * (5 + 6) + (8 * 6 * 3 * 4 * 5)) * 6 \n\
\ 2 * 2 * 6 * 8 + 4 * (7 * 5 * (8 + 3 * 6 * 4 + 7 * 5) + (5 * 8 * 8)) \n\
\ 9 + ((5 * 7 + 6) + 6 + (4 + 4 + 8 + 7) + 2) + 8 * 2 \n\
\ 3 * (8 + 2 * 9) * (4 * 4 + 8 + 6) + (5 + 5 * 7 + 6) + 8 * 4 \n\
\ (9 + 2 * 7) * 6 * (4 + 4) \n\
\ 4 + ((8 * 5 * 8 * 8) * (9 * 4 + 7 * 6) * 9) + 8 \n\
\ 3 * (8 + 3 + (3 * 2 + 2 + 3 * 3)) * (5 + 6) + 4 + 9 \n\
\ 7 * (6 * (8 + 6 * 3) + 5) \n\
\ 2 * 7 * 4 \n\
\ 6 * 5 + ((3 * 6 + 5 + 3) * 8 + 3 * 2) + (8 + 6 * 3 * (6 + 9 * 6 * 7 * 6) + 3 + 2) * 2 * 4 \n"

someFunc :: IO ()
someFunc = do
  putStrLn "Part 1"
  let inputLines = filter (/= "") $ lines day18input
      results = map ((doParse expressionMaybeWithBrackets) . (filter (not . isSpace))) inputLines
      summedResult = fmap sum $ fmap (fmap fst) $ sequence results
  putStrLn $ show summedResult

  putStrLn "Part 2"
  let results2 = map ((doParse expressionMaybeWithBracketsWithPrecedence) . (filter (not . isSpace))) inputLines
      summedResult2 = fmap sum $ fmap (fmap fst) $ sequence results2
  putStrLn $ show summedResult2
